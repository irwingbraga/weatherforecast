// <auto-generated />
using System;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Migrators.PostgreSQL.Migrations.Initial
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Forecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Forecasts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TemperatureRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("TemperatureRanges", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Forecast", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Temperature", "Temperature", b1 =>
                        {
                            b1.Property<Guid>("ForecastId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Temperature");

                            b1.HasKey("ForecastId");

                            b1.ToTable("Forecasts");

                            b1.WithOwner()
                                .HasForeignKey("ForecastId");
                        });

                    b.Navigation("Temperature")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.TemperatureRange", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Temperature", "MaxTemperature", b1 =>
                        {
                            b1.Property<Guid>("TemperatureRangeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("MaxTemperature");

                            b1.HasKey("TemperatureRangeId");

                            b1.ToTable("TemperatureRanges");

                            b1.WithOwner()
                                .HasForeignKey("TemperatureRangeId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Temperature", "MinTemperature", b1 =>
                        {
                            b1.Property<Guid>("TemperatureRangeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("MinTemperature");

                            b1.HasKey("TemperatureRangeId");

                            b1.ToTable("TemperatureRanges");

                            b1.WithOwner()
                                .HasForeignKey("TemperatureRangeId");
                        });

                    b.Navigation("MaxTemperature")
                        .IsRequired();

                    b.Navigation("MinTemperature")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
